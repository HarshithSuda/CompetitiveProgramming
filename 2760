#include <iostream>
#include <vector>
#include <algorithm>  // for max function

using namespace std;

class Solution {
public:
    int longestAlternatingSubarray(vector<int>& arr, int threshold) {
        if(arr.size() == 1) return 1;
        int res = 1, count = 1;
        for(int i = 0; i < arr.size() - 1; i++) {
            // Check if alternating even-odd and within threshold
            if((arr[i] % 2 == 0 && arr[i+1] % 2 != 0) && (arr[i] <= threshold) && (arr[i+1] <= threshold)) {
                count++;
            } else {
                res = max(res, count);  // Update result when sequence breaks
                count = 1;  // Reset count for a new subarray
            }
        }
        res = max(res, count);  // Final check for the last sequence
        return res;
    }
};

int main() {
    // Example input
    vector<int> arr = {2, 3, 4, 5, 6, 7, 8};
    int threshold = 7;
    
    // Create an instance of Solution
    Solution solution;
    
    // Call the method and print the result
    int result = solution.longestAlternatingSubarray(arr, threshold);
    
    cout << "The longest alternating subarray length is: " << result << endl;
    
    return 0;
}
